/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/

#include "../Inc/DiscordWebHookClasses.h"
#include <Wininet.h>
#include <stdio.h>

#pragma comment(lib, "wininet.lib")

struct DiscordDataStruct 
{
    FString URLPath;
    FString PostData;
};

IMPLEMENT_PACKAGE(DiscordWebHook)

IMPLEMENT_CLASS(ADiscordGameStats);
FNativeEntry<ADiscordGameStats> ADiscordGameStats::StaticNativeMap[] = {
	MAP_NATIVE(SendHTTPRequest,0)
	{NULL,NULL}
};
LINK_NATIVES(ADiscordGameStats);

DWORD WINAPI DiscordThread(LPVOID lpParameter)
{
	DiscordDataStruct* pArgs = (DiscordDataStruct*)lpParameter;

	LPCTSTR szUserAgent			= "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.74 Safari/537.36 Edg/79.0.309.43";
    LPCTSTR szHost				= "discordapp.com";
	LPCTSTR szAcceptTypes[]		= { "application/json", NULL };
	LPCTSTR szContentTypeHeader = "Content-Type: application/json";

	HINTERNET hIntSession = InternetOpen(szUserAgent, INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);

	if(hIntSession){
        HINTERNET hHttpSession = InternetConnect(hIntSession, szHost, INTERNET_DEFAULT_HTTPS_PORT, 0, 0, INTERNET_SERVICE_HTTP, 0, 0);

        if(hHttpSession){
            HINTERNET hHttpRequest = HttpOpenRequest(hHttpSession, "POST", *pArgs->URLPath, NULL, NULL, szAcceptTypes, (INTERNET_FLAG_NO_COOKIES | INTERNET_FLAG_SECURE | INTERNET_FLAG_PRAGMA_NOCACHE | INTERNET_FLAG_NO_CACHE_WRITE), 0);

            if(hHttpRequest){
                HttpSendRequest(hHttpRequest, szContentTypeHeader, -1, (LPVOID)*pArgs->PostData, pArgs->PostData.Len());
                InternetCloseHandle(hHttpRequest);
            }

            InternetCloseHandle(hHttpSession);
        }

        InternetCloseHandle(hIntSession);
    }

	delete pArgs;

	return 0;
}

void ADiscordGameStats::execSendHTTPRequest(FFrame& Stack, void* Result)
{
	P_GET_STR(StringURL);
	P_GET_STR(StringData);
	P_FINISH;

	DiscordDataStruct* args		= new DiscordDataStruct();
    args->URLPath				= *StringURL;
    args->PostData				= *FString::Printf(TEXT("{ \"username\":\"SWRC\", \"content\":\"%s\"}"), *StringData);
    
    DWORD myThreadID;
    HANDLE myHandle				= CreateThread(0, 0, (LPTHREAD_START_ROUTINE)DiscordThread, args, 0, &myThreadID);
}